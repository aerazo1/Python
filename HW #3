
1.	Download the de1.csv file, and store the data in DataFrame
a.	Calculate the difference between trade_date and maturity_date and store that data in a new column called ‘time_to_maturity’
b.	Delete the ‘special_condition” column
c.	Replace “-“with 99999 for the entire DataFrame
d.	Create a new column called “bond_id” to assign unique numbers to bonds, using cusip_link (it means that for observations that have the same cusip_link, they should be assigned with the same number
e.	Check whether the data type in column ‘price’ is number
f.	Create a new dataframe that sums up trade_amount by trade_date and trade_type. The new dataframe should look as follow:


'''
# Download the de1.csv file, and store the data in DataFrame

import pandas as pd
df = pd.read_csv('de.csv')

df.dtypes

# Calculate the difference between trade_date and maturity_date and store that data in a new column called ‘time_to_maturity’

df['trade_date'] = pd.to_datetime(df['trade_date'])
df['maturity_date'] = pd.to_datetime(df['maturity_date'])

df.dtypes

df['time_to_maturity'] = df['maturity_date'] - df['trade_date']

# Delete the ‘special_condition” column

df.pop('special_condition')

del df['special_condition']

# Replace “-“ with 99999 for the entire DataFrame

df.replace('-',value=99999,inplace=True)

# Create a new column called “bond_id” to assign unique numbers to bonds, using cusip_link

df.sort_values(['cusip_link'], inplace=True)

df['bond_id']=df.groupby(['cusip_link']).ngroup()

df['bond_id']=df.groupby(['cusip_link']).ngroup().add(1)

# Create a new dataframe that sums up trade_amount by trade_date and trade_type.

# Clean up trade_amount and convert it to numbers
df['trade_amount_converted'] = df['trade_amount'].replace(',','', regex=True)

df["trade_amount_converted"] = df["trade_amount_converted"].astype(int)

# Get trade_date only from datetime value

df['trade_date_only']= df['trade_date'].dt.date

# Getting the first 10 charcaters to get the date
df = pd.read_csv('de.csv')
df['trade_date_only_alt'] = df['trade_date'].str[:10]

# Sum in groups if they met certain conditions

df1 = df.groupby(['trade_date_only', 'trade_type'])['trade_amount_converted'].sum()

df1 = df1.to_frame().reset_index()

'''
2.	Write a function that take any two sentences as inputs. The function will do three things
a.	Calculate and print out the sum of unique words in both sentences
b.	Check the number of words in each sentences
	    Print out ‘Yolo’ if the number of words in both sentences are not the same
	    Print out ‘Happy’ if the number of words in both sentences are the same
c.	Remove these symbols “@, #, &, -, %” from the sentences
	    Print out those two sentences without those symbols

'''
# a
sentence_1 = 'I had dinner at 7-00 pm yesterday'
sentence_2 = 'I am paying interest rate @ 2%'

word_list_1 = sentence_1.split(' ')
word_list_2 = sentence_2.split(' ')

all_words = word_list_1 + word_list_2

unique_words = set(all_words)





count = 0
for word in unique_words:
    if (word in word_list_1 and word not in word_list_2) or (word in word_list_2 and word not in word_list_1):
        count += 1
print(count)




# b

if len(word_list_1) == len(word_list_2):
    print('Happy')
else:
    print('Yolo')

# c

sentence_1 = 'I had dinner at 7-00 pm yesterday'
sentence_2 = 'I am paying interest rate @ 2%'

word_list_1 = sentence_1.split(' ')
word_list_2 = sentence_2.split(' ')

print(word_list_1)
print(word_list_2)

sentence_list = []
for word in word_list_1:
    word_list = []
    for character in word:
        if character not in ('@', '#','&','-','%'):
            word_list.append(character)

    sentence_list.append("".join(word_list))

sentence = ' '
sentence.join(sentence_list)

# Putting all steps into a function

def check_sentences(sentence_1, sentence_2):

    # a
    word_list_1 = sentence_1.split(' ')
    word_list_2 = sentence_2.split(' ')

    all_words = word_list_1 + word_list_2

    unique_words = set(all_words)

    count = 0
    for word in unique_words:
        if (word in word_list_1 and word not in word_list_2) or (word in word_list_2 and word not in word_list_1):
            count += 1
    print(count)

    # b

    if len(word_list_1) == len(word_list_2):
        print('Happy')
    else:
        print('Yolo')

    # c

    sentence_list = []
    for word in word_list_1:
        word_list = []
        for character in word:
            if character not in ('@', '#', '&', '-', '%'):
                word_list.append(character)

        sentence_list.append("".join(word_list))

    sentence = ' '
    return sentence.join(sentence_list)

check_sentences('I had dinner at 7-00 pm yesterday', 'I am paying interest rate @ 2%')

'''
my_number_list1 = [2, 4, 7,10, 30, 77, 15, 33, 44]
my_number_list2 = [9, 10, 7,10, 20, 52, 15, 33, 44]

Write a nested loop to find the multiplication of each number in ‘my_number_list1’ to each number in ‘my_number_list2’ 
and print out “Happy” for the multiplication that is below 1000, and ‘Unhappy’ for the multiplication that is above 1000.

'''

my_number_list1 = [2, 4, 7,10, 30, 77, 15, 33, 44]
my_number_list2 = [9, 10, 7,10, 20, 52, 15, 33, 44]

for number_1 in my_number_list1:

    for number_2 in my_number_list2:
        multiplication = number_1 * number_2

        if multiplication < 1000:
            print(number_1, number_2, '------->', multiplication, 'Happy')

        elif multiplication > 1000:
            print(number_1, number_2, '------->', multiplication, 'Unhappy')
